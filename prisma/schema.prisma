generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int            @id @default(autoincrement())
  email    String         @unique
  name     String
  password String
  role     UserRole       @default(USER)
  teams    TeamMembers[]
  projects ProjectUsers[]
}

model Team {
  id       Int            @id @default(autoincrement())
  name     String
  token    String?        @unique
  expiry   DateTime?
  members  TeamMembers[]
  projects ProjectUsers[]
  project  Project[]
}

model TeamMembers {
  teamId Int
  userId Int
  team   Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   MemberRole @default(MEMBER)

  @@id([teamId, userId])
}

model Project {
  id        Int            @id @default(autoincrement())
  name      String
  teamId    Int
  team      Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  databases Database[]
  uuid      String         @default(uuid())
  users     ProjectUsers[]
}

model ProjectUsers {
  id        Int     @id @default(autoincrement())
  userId    Int
  projectId Int
  teamId    Int?
  user      User    @relation(fields: [userId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])
  Team      Team?   @relation(fields: [teamId], references: [id])
}

model Database {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  storage   Int
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  status    status   @default(INACTIVE)
}

enum UserRole {
  USER
  ADMIN
}

enum MemberRole {
  LEADER
  MEMBER
}

enum status {
  ACTIVE
  INACTIVE
  SLEEP
}
